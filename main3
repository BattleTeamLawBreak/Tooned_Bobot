/* Copyright (c) 2017 FIRST. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted (subject to the limitations in the disclaimer below) provided that
 * the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this list
 * of conditions and the following disclaimer.
 *
 * Redistributions in binary form must reproduce the above copyright notice, this
 * list of conditions and the following disclaimer in the documentation and/or
 * other materials provided with the distribution.
 *
 * Neither the name of FIRST nor the names of its contributors may be used to endorse or
 * promote products derived from this software without specific prior written permission.
 *
 * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.DcMotorEx;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;
import com.qualcomm.robotcore.hardware.Servo;
 




/*
 * This file contains an minimal example of a Linear "OpMode". An OpMode is a 'program' that runs in either
 * the autonomous or the teleop period of an FTC match. The names of OpModes appear on the menu
 * of the FTC Driver Station. When a selection is made from the menu, the corresponding OpMode
 * class is instantiated on the Robot Controller and executed.
 *
 * This particular OpMode just executes a basic Tank Drive Teleop for a two wheeled robot
 * It includes all the skeletal structure that all linear OpModes contain.
 *
 * Use Android Studio to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this OpMode to the Driver Station OpMode list
 */

@TeleOp(name = "Team3", group = "LinearOpMode")

public class Team3 extends LinearOpMode {
    private DcMotor frontleftDrive = null;
    private DcMotor backleftDrive = null;
    private DcMotor frontrightDrive = null;
    private DcMotor backrightDrive = null;
    Servo servo3 = null;
    boolean open = true;
    double tgtPower = 0;
    private DcMotor leftArm;  
    private DcMotor rightArm; 
    private double leftArmPower = 0; 
    private double rightArmPower = 0; 
        
    


    @Override
    public void runOpMode() {
        frontleftDrive = hardwareMap.get(DcMotor.class, "rearleft");
        frontrightDrive = hardwareMap.get(DcMotor.class, "rearright");
        backleftDrive = hardwareMap.get(DcMotor.class, "frontright");
        backrightDrive = hardwareMap.get(DcMotor.class, "frontleft"); 
        servo3 = hardwareMap.get(Servo.class, "servo3");
       
        
        frontleftDrive.setDirection(DcMotor.Direction.REVERSE);
        frontrightDrive.setDirection(DcMotor.Direction.FORWARD);
        backleftDrive.setDirection(DcMotor.Direction.REVERSE);
        backrightDrive.setDirection(DcMotor.Direction.FORWARD);
        
        frontleftDrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        frontrightDrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        backleftDrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        backrightDrive.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        
        leftArm = hardwareMap.get(DcMotor.class, "motor3");
        rightArm = hardwareMap.get(DcMotor.class, "motor4");
        
        leftArm.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        rightArm.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        
        leftArm.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        rightArm.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        

        leftArm.setDirection(DcMotor.Direction.FORWARD);
        rightArm.setDirection(DcMotor.Direction.REVERSE);
        
        leftArm.setTargetPosition(-35);
        rightArm.setTargetPosition(-35);
        
        leftArm.setPower(.5);
        rightArm.setPower(.5);
        
        leftArm.setMode(DcMotorEx.RunMode.RUN_TO_POSITION);
        rightArm.setMode(DcMotorEx.RunMode.RUN_TO_POSITION);
        
 
        waitForStart();

      
        double flpower, frpower, blpower, brpower;
        double drive = 0;
        double strafe = 0;
        double turn = 0;
        waitForStart();


        while (opModeIsActive()) {
      
            drive = gamepad1.left_stick_y ;
            strafe = gamepad1.left_stick_x ;
            turn = gamepad1.right_stick_x;
            
            frpower = drive - turn + strafe;
            brpower = drive - turn - strafe;
            flpower = drive + turn - strafe;
            blpower = drive + turn + strafe;
            
            frontleftDrive.setPower(flpower);
            frontrightDrive.setPower(frpower);
            backleftDrive.setPower(blpower);
            backrightDrive.setPower(brpower);
          
            
            
            
            if (gamepad1.dpad_up ||  gamepad2.dpad_up) {
                leftArm.setTargetPosition(-1400);
                rightArm.setTargetPosition(-1400);
            
                leftArm.setPower(.5);
                rightArm.setPower(.5);
            
                leftArm.setMode(DcMotorEx.RunMode.RUN_TO_POSITION);
                rightArm.setMode(DcMotorEx.RunMode.RUN_TO_POSITION);
            }
           
           
            if (gamepad1.dpad_down || gamepad2.dpad_down) {
                leftArm.setTargetPosition(-1940);
                rightArm.setTargetPosition(-1940);
        
                leftArm.setPower(.3);
                rightArm.setPower(.3);
        
                leftArm.setMode(DcMotorEx.RunMode.RUN_TO_POSITION);
                rightArm.setMode(DcMotorEx.RunMode.RUN_TO_POSITION);
            }
            
            
            if (gamepad1.dpad_left || gamepad2.dpad_left) {
                leftArm.setTargetPosition(-40);
                rightArm.setTargetPosition(-40);
        
                leftArm.setPower(.3);
                rightArm.setPower(.3);
        
                leftArm.setMode(DcMotorEx.RunMode.RUN_TO_POSITION);
                rightArm.setMode(DcMotorEx.RunMode.RUN_TO_POSITION);
            }
            
            
            if (gamepad1.left_trigger > 0.05 || gamepad2.left_trigger > 0.05) {
                leftArm.setTargetPosition(leftArm.getCurrentPosition() + 10);
                rightArm.setTargetPosition(rightArm.getCurrentPosition() + 10);
        
                leftArm.setMode(DcMotorEx.RunMode.RUN_TO_POSITION);
                rightArm.setMode(DcMotorEx.RunMode.RUN_TO_POSITION);
            }
            
            if (gamepad1.right_trigger > 0.05 || gamepad2.right_trigger > 0.05) {
                leftArm.setTargetPosition(leftArm.getCurrentPosition() - 10);
                rightArm.setTargetPosition(rightArm.getCurrentPosition() - 10);
        
                leftArm.setMode(DcMotorEx.RunMode.RUN_TO_POSITION);
                rightArm.setMode(DcMotorEx.RunMode.RUN_TO_POSITION);
            }
            if(gamepad1.b || gamepad2.b) {
                telemetry.addData("B is pressed", "");
                telemetry.update();
                servo3.setPosition(.5);
            } 
               
            if (gamepad1.y || gamepad2.y) {
                telemetry.addData("Y is pressed", "");
                telemetry.update();
                servo3.setPosition(0);
            } 
            
            telemetry.update();
            
            
            
            
            telemetry.addData("Left Arm Power", leftArmPower);
            telemetry.addData("Right Arm Power", rightArmPower);
            telemetry.addData("Left Arm position", leftArm.getCurrentPosition());
            telemetry.addData("Right Arm position", rightArm.getCurrentPosition());
            telemetry.update();
        }
        

    
          
            
           
}
}



